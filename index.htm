<!DOCTYPE html><html><head><title>Honeycomb</title><meta charset="UTF-8">
<style>*{position:absolute;margin:0px;}</style>
<body><script type="text/javascript">

/*+==========================================================================+*\
                 __ ______  _  ________  ___________  __  ______ 
                / // / __ \/ |/ / __/\ \/ / ___/ __ \/  |/  / _ )
               / _  / /_/ /    / _/   \  / /__/ /_/ / /|_/ / _  |
              /_//_/\____/_/|_/___/   /_/\___/\____/_/  /_/____/ 

\*+==========================================================================+*/

"use strict"

var canvas = document.createElement("canvas");
var gfx = canvas.getContext("2d");
var ww = canvas.width  = window.innerWidth;
var wh = canvas.height = window.innerHeight;
var tick=0,tickOffset=0,elapsed=0;
function rfloat(x){return Math.random()*x;};
function rInt(x){return Math.floor(Math.random()*x);};
function shuffle(ls){return ls.sort(function(){return 0.5-Math.random();});}

//==  MISC RENDERING  ========================================================//

function rgb(r,g,b){gfx.fillStyle=gfx.strokeStyle="rgb("+Math.floor(255*r)+","+Math.floor(255*g)+","+Math.floor(255*b)+")";};
function rgba(r,g,b,a){gfx.fillStyle=gfx.strokeStyle="rgba("+Math.floor(255*r)+","+Math.floor(255*g)+","+Math.floor(255*b)+","+a+")";};

function hsv(h,s,v){
	var r,g,b,i,f,p,q,t;
	if (h&&s===undefined&&v===undefined)s=h.s,v=h.v,h=h.h;
	i = Math.floor(h*6);
	f = h*6-i;
	p = v*(1-s);
	q = v*(1-f*s);
	t = v*(1-(1-f)*s);
	switch(i%6){
		case 0:r=v,g=t,b=p;break;
		case 1:r=q,g=v,b=p;break;
		case 2:r=p,g=v,b=t;break;
		case 3:r=p,g=q,b=v;break;
		case 4:r=t,g=p,b=v;break;
		case 5:r=v,g=p,b=q;break;
	}gfx.fillStyle=gfx.strokeStyle="rgb("+Math.floor(255*r)+","+Math.floor(255*g)+","+Math.floor(255*b)+")";
}

var goldenAngle = 0.381966;

//==  GRID GENERATION  =======================================================//

var sq3 = Math.sqrt(3);
var hexRad = 48;
var minDepth = 3;
var cellLs;
var markerLs;
var fillLs;

var cell = function(){
	this.path = []; // 0-1 | 2-3 | 4-5
	this.used = [false,false,false,false,false,false];
	this.adjacent = [null,null,null,null,null,null]; // E SE SW W NW NE
	this.markers = [null,null,null,null,null,null]; // E SE SW W NW NE
	this.rotation = 0; // cw = + | ccw = - [ when this is a float, treat as its rendered rotation, treat discrete rot as invalid ]
	this.goalRotation = 0; // when rotating tile, modify this value instead of rotation
	this.x;
	this.y;

	this.render = function(){
		this.rotation+=(this.goalRotation-this.rotation)*elapsed*0.02;
		if(Math.abs(this.goalRotation-this.rotation)<0.001)this.rotation = this.goalRotation;
		gfx.save();
		gfx.translate(this.x+ww/2,this.y+wh/2);
		gfx.rotate(this.rotation*Math.PI/3);
		rgb(0.1,0.1,0.1);drawHex(0,0,hexRad-2);
		rgb(0.6,0.6,0.6);drawHex(0,0,hexRad-8);
		for(var i=0;i<this.path.length;i+=2){
			var drawLine = function(c){
				gfx.beginPath();
				var p0 = Math.min(c.path[i],c.path[i+1]);
				var p1 = Math.max(c.path[i],c.path[i+1]);
				switch(p0*10+p1){
					case  1:gfx.arc(hexRad/2*sq3,hexRad/2,hexRad/2,5/6*Math.PI,3/2*Math.PI);break;
					case  2:gfx.arc(hexRad/2*sq3,hexRad*1.5,hexRad*1.5,7/6*Math.PI,3/2*Math.PI);break;
					case  3:gfx.moveTo(hexRad/2*sq3,0);gfx.lineTo(-hexRad/2*sq3,0);break;
					case  4:gfx.arc(hexRad/2*sq3,-hexRad*1.5,hexRad*1.5,1/2*Math.PI,5/6*Math.PI);break;
					case  5:gfx.arc(hexRad/2*sq3,-hexRad/2,hexRad/2,1/2*Math.PI,7/6*Math.PI);break;
					case 12:gfx.arc(0,hexRad,hexRad/2,7/6*Math.PI,11/6*Math.PI);break;
					case 13:gfx.arc(-hexRad/2*sq3,hexRad*1.5,hexRad*1.5,3/2*Math.PI,11/6*Math.PI);break;
					case 14:gfx.moveTo(hexRad/4*sq3,hexRad*3/4);gfx.lineTo(-hexRad/4*sq3,-hexRad*3/4);break;
					case 15:gfx.arc(hexRad*sq3,0,hexRad*1.5,5/6*Math.PI,7/6*Math.PI);break;
					case 23:gfx.arc(-hexRad/2*sq3,hexRad/2,hexRad/2,3/2*Math.PI,1/6*Math.PI);break;
					case 24:gfx.arc(-hexRad*sq3,0,hexRad*1.5,-1/6*Math.PI,1/6*Math.PI);break;
					case 25:gfx.moveTo(-hexRad/4*sq3,hexRad*3/4);gfx.lineTo(hexRad/4*sq3,-hexRad*3/4);break;
					case 34:gfx.arc(-hexRad/2*sq3,-hexRad/2,hexRad/2,11/6*Math.PI,1/2*Math.PI);break;
					case 35:gfx.arc(-hexRad/2*sq3,-hexRad*1.5,hexRad*1.5,1/6*Math.PI,1/2*Math.PI);break;
					case 45:gfx.arc(0,-hexRad,hexRad/2,1/6*Math.PI,5/6*Math.PI);break;
				}gfx.stroke();
			};

			rgb(0.1,0.1,0.1);gfx.lineWidth = 19;drawLine(this);
			rgb(0.9,0.9,0.9);gfx.lineWidth = 10;drawLine(this);
		}

		gfx.restore();
		
		return this.rotation === this.goalRotation;
	};

	this.rotateCW  = function(){++this.goalRotation;};
	this.rotateCCW = function(){--this.goalRotation;};
};

var marker = function(attach,side,color){
	this.attachedTo = attach;
	this.side = side; // 0-5, side marker is attached to on cell
	this.color = color; // what color
	this.partner = null; // marker this should connect to

	this.update = function(){};

	this.render = function(){
		gfx.save();
		gfx.translate(this.attachedTo.x+ww/2,this.attachedTo.y+wh/2);
		hsv(this.color,1,1);
		var r = this.side*1/3*Math.PI;

		gfx.lineWidth = 7;
		gfx.beginPath();
		gfx.moveTo(Math.cos(r)*hexRad*0.75,Math.sin(r)*hexRad*0.75);
		gfx.lineTo(Math.cos(r)*hexRad*1.00,Math.sin(r)*hexRad*1.00);
		gfx.stroke();

		gfx.lineWidth = 19;
		gfx.beginPath();
		gfx.moveTo(Math.cos(r)*hexRad*1.04,Math.sin(r)*hexRad*1.04);
		gfx.lineTo(Math.cos(r)*hexRad*0.90,Math.sin(r)*hexRad*0.90);
		gfx.stroke();

		gfx.restore();
	};
};

function generateGrid(){
	var preGrid = [
		[1,1,1,0,0],
		[1,1,1,1,0],
		[1,1,0,1,1],
		[0,1,1,1,1],
		[0,0,1,1,1],
	];

	var markerPairs = 3;

	// initializes cells, grid, and cellLs
	cellLs = [];
	for(var i=0;i<preGrid.length;++i)
	for(var j=0;j<preGrid[i].length;++j)
	if(preGrid[i][j] === 1){
		var c = new cell();
		preGrid[i][j] = c;
		cellLs.push(c);
	}else preGrid[i][j] = null;

	// transpose grid
	var grid = preGrid[0].map(function(col,i){
		return preGrid.map(function(row){
			return row[i];
		});
	});

	// initialize pointers and coordinates
	for(var i=0;i<grid.length;++i)
	for(var j=0;j<grid[i].length;++j)
	if(grid[i][j] !== null){
		grid[i][j].x = (-(j-Math.floor(grid.length/2))+2*i-2*Math.floor(grid[0].length/2))*hexRad/2*sq3;
		grid[i][j].y = (1.5*hexRad*j)-1.5*hexRad*Math.floor(grid.length/2);
		if(i<grid.length-1)                     grid[i][j].adjacent[0]=grid[i+1][j  ];
		if(i<grid.length-1&&j<grid[i].length-1) grid[i][j].adjacent[1]=grid[i+1][j+1];
		if(j<grid[i].length-1)                  grid[i][j].adjacent[2]=grid[i  ][j+1];
		if(i>0)                                 grid[i][j].adjacent[3]=grid[i-1][j  ];
		if(i>0&&j>0)                            grid[i][j].adjacent[4]=grid[i-1][j-1];
		if(j>0)                                 grid[i][j].adjacent[5]=grid[i  ][j-1];
	}

	// initialize markers
	markerLs = [];
	for(var i=0;i<markerPairs;++i){
		while(true){
			var c,dir,m0,m1;
			outer:while(true){
				c = cellLs[rInt(cellLs.length)];
				var adjLs = shuffle([0,1,2,3,4,5]);
				for(var a=0;a<6;++a)if(c.adjacent[adjLs[a]] === null && c.markers[adjLs[a]] === null){
					dir = adjLs[a];
					m0 = new marker(c,dir,i*goldenAngle);
					c.markers[dir] = m0;
					break outer;
				}
			}

			// returns true=found dest,keep path | false=not found dest,remove path
			var destCell,destDir;
			var recurse = function(fromCell,fromDir,depth){
				if(depth>0)fromDir = (fromDir+3)%6;
				var adjLs = [0,1,2,3,4,5];
				adjLs.splice(fromDir,1);
				shuffle(adjLs);
				for(var a=0;a<6;++a){
					if(fromCell.used[adjLs[a]])continue;
					fromCell.used[fromDir] = true;
					fromCell.used[adjLs[a]] = true;
					fromCell.path.push(fromDir);
					fromCell.path.push(adjLs[a]);

					var clear = function(){
						fromCell.used[fromDir] = false;
						fromCell.used[adjLs[a]] = false;
						fromCell.path.pop();
						fromCell.path.pop();
					}

					var d = fromCell.adjacent[adjLs[a]];
					if(d !== null && d !== undefined){
						if(recurse(d,adjLs[a],depth+1))return true;
						else{
							clear();
							continue;
						}
					}else if(fromCell.markers[adjLs[a]]){
						clear();
						continue;
					}else if(depth < minDepth){
						clear();
						continue;
					}else{
						destCell = fromCell;
						destDir = adjLs[a];
						m1 = new marker(destCell,destDir,i*goldenAngle);
						destCell.markers[adjLs[a]] = m1;
						return true;
					}
				}return false;
			};

			if(!recurse(c,dir,0)){
				c.markers[dir] = null;
				continue;
			}

			m0.partner = m1;
			m1.partner = m0;
			markerLs.push(m0);
			markerLs.push(m1);
			break;
		}
	}

	// add rest of paths
	for(var i in cellLs){
		var c = cellLs[i];
		if(c.path.length === 6)continue;
		var indicies = c.used.map(function(b,i){if(!b)return i;}).filter(function(e){return e !== undefined;});
		shuffle(indicies);
		c.path = c.path.concat(indicies);
	}
};

generateGrid();

//==  MAIN LOOP  =============================================================//

function drawHex(x,y,r){
	gfx.save();
	gfx.translate(x,y);
	gfx.beginPath();
	gfx.moveTo(0,r);
	gfx.lineTo(r/2*sq3,r/2);
	gfx.lineTo(r/2*sq3,-r/2);
	gfx.lineTo(0,-r);
	gfx.lineTo(-r/2*sq3,-r/2);
	gfx.lineTo(-r/2*sq3,r/2);
	gfx.lineTo(0,r);
	gfx.fill();
	gfx.restore();
};

function render(){
	var currentTick = new Date().getTime()-tickOffset;
	elapsed = Math.min(currentTick-tick,5);
	tick = currentTick;

	rgb(0.9,0.9,0.9);
	gfx.fillRect(0,0,ww,wh);
	gfx.save();

	var animating = false;
	for(var i in cellLs)if(!cellLs[i].render())animating = true;
	for(var i in markerLs)markerLs[i].render();
	if(animating)requestAnimationFrame(render);
	
	gfx.restore();
};

//==  INPUT HANDLING  ========================================================//

function getMousePos(evt){
	var rect = canvas.getBoundingClientRect();
	return{x:evt.clientX-rect.left,y:evt.clientY-rect.top};
};

//	canvas.addEventListener("mousedown",function(e){
//		var mouse = getMousePos(e);
//		render(); // XXX: remove if theres continuous animation
//	});

canvas.addEventListener("mouseup",function(e){
	var mouse = getMousePos(e);

	var minDist = Infinity;
	var minCell = null;
	for(var i in cellLs){
		var c = cellLs[i];
		var x = c.x+ww/2-mouse.x;
		var y = c.y+wh/2-mouse.y;
		var sqDist = x*x+y*y;
		if(sqDist<minDist){
			minDist = sqDist;
			minCell = c;
		}
	}if(minDist>hexRad*hexRad)return;

	switch(e.which){
		case 1:minCell.rotateCCW();break;
		case 3:minCell.rotateCW();break;
	}

	render(); // XXX: remove if theres continuous animation
});

// TOUCH CODE

var tchStart;
canvas.addEventListener("touchstart", function(e){
    e.preventDefault();
    var tchs = e.changedTouches;
    var x=y=0;
    for(var i=0;i<touches.length;++i){
	x += tchs[i].screenX;
	y += tchs[i].screenY;
    }tchStart = [x/tchs.length,y/tchs.length]
    alert("touch start");
  }, false);

canvas.addEventListener("touchend", function(e){
    e.preventDefault();
    var tchs = e.changedTouches;
    var x=y=0;
    for(var i=0;i<tchs.length;++i){
	x += tchs[i].screenX;
	// y += tchs[i].screenY;
    }var move = x/tchs.length-tchStart[0];
    alert(move);

    var minDist = Infinity;
    var minCell = null;
    for(var i in cellLs){
	var c = cellLs[i];
	var x = c.x+ww/2-tchStart.x;
	var y = c.y+wh/2-tchStart.y;
	var sqDist = x*x+y*y;
	if(sqDist<minDist){
	    minDist = sqDist;
	    minCell = c;
	}
    }if(minDist>hexRad*hexRad)return;

    for(var i =0;i<Math.abs(move);i+=10){
	if     (move<0) minCell.rotateCCW();
	else if(move>0) minCell.rotateCW();
    }
}, false);


//==  PROGRAM ENTRY + MISC  ==================================================//

canvas.oncontextmenu = function(){return false;}; // prevent right click menu

window.onresize = function(){ // auto-resize canvas to window
	ww = canvas.width  = window.innerWidth;
	wh = canvas.height = window.innerHeight;
	render(); // XXX: remove if theres continuous animation
};

(function main(){
	document.body.appendChild(canvas);
	tickOffset=new Date().getTime();render();}
)();

</script></body></html>
