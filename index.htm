<!DOCTYPE html><html><head><title>Torxion</title><meta charset="UTF-8">
<style>*{position:absolute;margin:0px;}</style>
<body>
<script type="text/javascript" src="temp.js"></script>
<script type="text/javascript">

var overlay = 0; // 0 = none, 1 = title, 2 = win
var padding = 48;
var menuHeight = 64;
var diffHover = 0; // -1 = none | 0 = easy | 1 = med | 2 = hard
var diffGoal = [0,0,0];
var diffAlpha = [0,0,0];

//==  MAIN LOOP  =============================================================//

function menuHover(diff){
	if(diffHover === diff)return;
	requestAnimationFrame(render);
	diffHover = diff;
	diffGoal = [0,0,0];
	if(diff>=0)diffGoal[diff] = 1;
};

function renderMenu(){
	gfx.save();

	gfx.lineCap = "round";
	gfx.shadowBlur = 8;
	gfx.lineWidth = 8;

	gfx.beginPath();
		gfx.shadowColor = hsv(0.3+goldenAngle*4,1,1); // 2 == blue | 3 == red | 4 == green
		gfx.moveTo(ww/2-8-64,wh-32);
		gfx.lineTo(ww/2+8-64,wh-32);
	gfx.stroke();

	gfx.beginPath();
		gfx.shadowColor = hsv(0.3+goldenAngle*2,1,1); // 2 == blue | 3 == red | 4 == green
		gfx.moveTo(ww/2-8,wh-32);
		gfx.lineTo(ww/2+8,wh-32);
	gfx.stroke();

	gfx.beginPath();
		gfx.shadowColor = hsv(0.3+goldenAngle*3,1,1); // 2 == blue | 3 == red | 4 == green
		gfx.moveTo(ww/2-8+64,wh-32);
		gfx.lineTo(ww/2+8+64,wh-32);
	gfx.stroke();

	gfx.restore();
};

function render(){
	var currentTick = new Date().getTime()-tickOffset;
	elapsed = Math.min(currentTick-tick,5);
	tick = currentTick;

	if(evaluate){
		evaluate = false;
		evalPaths();
	}

	rgb(0.9,0.9,0.9);
	gfx.fillRect(0,0,ww,wh);
	gfx.save();

	var animating = false;

	for(var d=0;d<3;++d){
		gfx.save();
		diffAlpha[d] += (diffGoal[d]-diffAlpha[d])*elapsed*0.03;
		if(Math.abs(diffAlpha[d]-diffGoal[d])<0.01)diffAlpha[d] = diffGoal[d];
		if(diffAlpha[d] === 0)continue;

		var difficulty;
		switch(d){
			case 0:difficulty = "Easy";break;
			case 1:difficulty = "Medium";break;
			case 2:difficulty = "Hard";break;
		}

		gfx.shadowColor = rgba(0.1,0.1,0.1,diffAlpha[d]);
		gfx.shadowBlur = 8;
		var w = textWidth(difficulty,32,-3);
		text(difficulty,ww/2-w/2,wh-64-28,32,-3);
		gfx.restore();
		rgba(0.9,0.9,0.9,diffAlpha[d]);
		text(difficulty,ww/2-w/2,wh-64-28,32,-3);

		if(diffGoal[d] !== diffAlpha[d])animating = true;
	}

	gfx.translate(ww/2,wh/2-32);
	gfx.scale(scale/48,scale/48);

	for(var i in markerLs)markerLs[i].belowRender();
	for(var i in cellLs)if(!cellLs[i].shadow())animating = true;
	for(var i in cellLs)cellLs[i].render();
	for(var i in markerLs)markerLs[i].render();
	for(var i in fillLs){
		var f = fillLs[i];
		f[2] += (f[3]-f[2])*elapsed*0.02;
		if(f[2] !== f[3] && Math.abs(f[2]-f[3]) < 0.01)f[2] = f[3];
		if(f[2] !== f[3])animating = true;
		gfx.shadowColor = hsva(f[0],1,1,f[2]);
		gfx.shadowBlur = 4;
		gfx.lineWidth = 4;
		for(var j in f[1])f[1][j].highlight();
	}if(animating)requestAnimationFrame(render);
	gfx.restore();

	renderMenu();
};

//==  INPUT HANDLING  ========================================================//

var tchStart,tchMove,tchCell;

function getMousePos(evt){
	var rect = canvas.getBoundingClientRect();
	return{x:evt.clientX-rect.left,y:evt.clientY-rect.top};
};

canvas.addEventListener("mousemove",function(e){
	var mouse = getMousePos(e);
	if(mouse.y>wh-menuHeight){
		if(mouse.x>ww/2-12-64 && mouse.x<ww/2+12-64){menuHover(0);return;}
		if(mouse.x>ww/2-12    && mouse.x<ww/2+12   ){menuHover(1);return;}
		if(mouse.x>ww/2-12+64 && mouse.x<ww/2+12+64){menuHover(2);return;}
	}menuHover(-1);
});

canvas.addEventListener("mouseup",function(e){
	var mouse = getMousePos(e);
	if(mouse.y>wh-menuHeight){
		if(mouse.x>ww/2-12-64 && mouse.x<ww/2+12-64)generateGrid(2,3,[[1,1,0],[1,1,1],[0,1,1]]);
		if(mouse.x>ww/2-12    && mouse.x<ww/2+12   )generateGrid(4,5,[[1,1,1,0,0],[1,1,1,1,0],[1,1,0,1,1],[0,1,1,1,1],[0,0,1,1,1]]);
		if(mouse.x>ww/2-12+64 && mouse.x<ww/2+12+64)generateGrid(6,7,[[1,1,1,1,0,0,0],[1,1,1,1,1,0,0],[1,1,1,1,1,1,0],[1,1,1,0,1,1,1],[0,1,1,1,1,1,1],[0,0,1,1,1,1,1],[0,0,0,1,1,1,1]]);
		return;
	}

	var minDist = Infinity;
	var minCell = null;
	for(var i in cellLs){
		var c = cellLs[i];
		var x = c.x*scale/48+ww/2-mouse.x;
		var y = c.y*scale/48+wh/2-mouse.y-32;
		var sqDist = x*x+y*y;
		if(sqDist<minDist){
			minDist = sqDist;
			minCell = c;
		}
	}if(minDist>scale*scale)return;
	switch(e.which){
		case 1:minCell.rotateCCW();break;
		case 3:minCell.rotateCW();break;
	}requestEval();
});

document.addEventListener("keyup",function(e){
	switch(e.keyCode){
		case 82:for(var i in cellLs)cellLs[i].goalRotation=0;requestEval();break; // R
		case 83:for(var i in cellLs)cellLs[i].goalRotation=rInt(6)-3;requestEval();break; // S
	}
},false);

// TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO //

canvas.addEventListener("touchstart",function(e){
	// e.preventDefault();  // turns off clicking
	var tch = e.changedTouches[0];
	tchCell = null;
	tchStart = [tch.pageX,tch.pageY];
	tchMove = tchStart;
	var minDist = Infinity;
	var minCell = null;
	for(var i in cellLs){
		var c = cellLs[i];
		var x = c.x*scale/48+ww/2-tchStart[0];
		var y = c.y*scale/48+wh/2-tchStart[1];
		var sqDist = x*x+y*y;
		if(sqDist<minDist){
			minDist = sqDist;
			minCell = c;
		}
	}if(minDist>scale*scale)return;
	tchCell = minCell;
},false);

canvas.addEventListener("touchmove",function(e){
	e.preventDefault();
	if(tchCell === null)return;
	var tch = e.changedTouches[0];
	var move = tch.pageX-tchMove[0];
	if(Math.abs(move)>scale){
		if(move<0)tchCell.rotateCCW();
		else if(move>0)tchCell.rotateCW();
		tchMove = [tch.pageX,tch.pageY];
	}requestEval();
},false);

// TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO //

//==  PROGRAM ENTRY + MISC  ==================================================//

canvas.oncontextmenu = function(){return false;}; // prevent right click menu

window.onresize = function(){ // auto-resize canvas to window
	ww = canvas.width  = window.innerWidth;
	wh = canvas.height = window.innerHeight;

	scaleX = (ww-2*padding)/width;
	scaleY = (wh-2*padding-menuHeight)/height;
	scale = Math.min(scaleX,scaleY);

	requestAnimationFrame(render);
};

(function main(){
	document.body.appendChild(canvas);
	var minDepth = 6;
	var markerPairs = 7;
	window.onresize();
	generateGrid(4,5,[[1,1,1,0,0],[1,1,1,1,0],[1,1,0,1,1],[0,1,1,1,1],[0,0,1,1,1]]);
	tickOffset=new Date().getTime();requestAnimationFrame(render);}
)();

</script></body></html>
