<!DOCTYPE html><html><head><title>Honeycomb</title><meta charset="UTF-8">
<style>*{position:absolute;margin:0px;}</style>
<body bgcolor="000000"><script type="text/javascript">

/*+==========================================================================+*\
                 __ ______  _  ________  ___________  __  ______ 
                / // / __ \/ |/ / __/\ \/ / ___/ __ \/  |/  / _ )
               / _  / /_/ /    / _/   \  / /__/ /_/ / /|_/ / _  |
              /_//_/\____/_/|_/___/   /_/\___/\____/_/  /_/____/ 

\*+==========================================================================+*/

var canvas = document.createElement("canvas");
var gfx = canvas.getContext("2d");
var ww = canvas.width  = window.innerWidth;
var wh = canvas.height = window.innerHeight;
var tick,elapsed;
function rfloat(x){return Math.random()*x;};
function rInt(x){return Math.floor(Math.random()*x);};

//==  MISC RENDERING  ========================================================//

function rgb(r,g,b){gfx.fillStyle=gfx.strokeStyle="rgb("+Math.floor(255*r)+","+Math.floor(255*g)+","+Math.floor(255*b)+")";};

//==  GRID GENERATION  =======================================================//

// global 1d list of cells
// global 1d list of markers

cell = function(){

/*
	4 / \ 5
	3 | | 0
	2 \ / 1
*/

	this.path = [-1,-1,-1,-1,-1,-1]; // 0-1 | 2-3 | 4-5
	this.adjacent = [null,null,null,null,null,null]; // E SE SW W NW NE
	this.rotation = 0; // cw = + | ccw = - [ when this is a float, treat as its rendered rotation, treat discrete rot as invalid ]
	this.goalRotation = 0; // when rotating tile, modify this value instead of rotation
	this.x;
	this.y;

	this.update = function(){rotation+=(goalRotation-rotation)*elapsed*0.01;}; // QSTN: should this return a bool when its done interpolating?
	this.render = function(){};
	this.rotateCW  = function(){++goalRotation};
	this.rotateCCW = function(){--goalRotation};
};

marker = function(){
	this.attachedTo = null;
	this.side = -1; // 0-5, side marker is attached to on cell
	this.partner = null; // marker this should connect to
	this.color = -1; // what color

	this.update = function(){};
	this.render = function(){};
};

function generateGrid(){
};

//==  MAIN LOOP  =============================================================//

var sq3 = Math.sqrt(3);

function drawHex(x,y,r){
	gfx.save();
	gfx.translate(x,y);
	gfx.beginPath();
	gfx.moveTo(0,r);
	gfx.lineTo(r/2*sq3,r/2);
	gfx.lineTo(r/2*sq3,-r/2);
	gfx.lineTo(0,-r);
	gfx.lineTo(-r/2*sq3,-r/2);
	gfx.lineTo(-r/2*sq3,r/2);
	gfx.lineTo(0,r);
	gfx.fill();
	gfx.restore();
};

function render(){
	var currentTick = new Date().getTime();
	elapsed = currentTick-tick;
	tick = currentTick;

	gfx.clearRect(0,0,ww,wh);
	gfx.save();

	rgb(1,1,1);
	gfx.beginPath();
	gfx.moveTo(10,10);
	gfx.lineTo(ww-10,10);
	gfx.lineTo(ww-10,wh-10);
	gfx.lineTo(10,wh-10);
	gfx.lineTo(10,10);
	gfx.fill();

	rgb(1,0,0);
	drawHex(ww/2,wh/2,100);
	rgb(1,1,1);
	drawHex(ww/2,wh/2,90);

	rgb(0,0,0);
	gfx.save();
	gfx.translate(ww/2,wh/2);
	gfx.beginPath();
		gfx.moveTo(0,0);
		gfx.lineTo(100/4*sq3,100*3/4);
	gfx.stroke();
	gfx.restore();

	gfx.restore();
};

//==  INPUT HANDLING  ========================================================//

function getMousePos(evt){
	var rect = canvas.getBoundingClientRect();
	return{x:evt.clientX-rect.left,y:evt.clientY-rect.top};
};

canvas.addEventListener("mousedown",function(e){
	mouse = getMousePos(e);
	render(); // XXX: remove if theres continuous animation
});

canvas.addEventListener("mouseup",function(e){
	mouse = getMousePos(e);
	render(); // XXX: remove if theres continuous animation
});

//==  PROGRAM ENTRY + MISC  ==================================================//

canvas.oncontextmenu = function(){return false;}; // prevent right click menu

window.onresize = function(){ // auto-resize canvas to window
	ww = canvas.width  = window.innerWidth;
	wh = canvas.height = window.innerHeight;
	render(); // XXX: remove if theres continuous animation
};

(function main(){
	document.body.appendChild(canvas);
	tick=new Date().getTime();render();}
)();

</script></body></html>
